{
  "_args": [
    [
      {
        "raw": "houndify@file:houndify-2.1.0.tgz",
        "scope": null,
        "escapedName": "houndify",
        "name": "houndify",
        "rawSpec": "file:houndify-2.1.0.tgz",
        "spec": "/Users/Anthony/Desktop/houndify-2.1.0/example/houndify-2.1.0.tgz",
        "type": "local"
      },
      "/Users/Anthony/Desktop/houndify-2.1.0/example"
    ]
  ],
  "_from": "houndify-2.1.0.tgz",
  "_id": "houndify@2.1.0",
  "_inCache": true,
  "_location": "/houndify",
  "_phantomChildren": {},
  "_requested": {
    "raw": "houndify@file:houndify-2.1.0.tgz",
    "scope": null,
    "escapedName": "houndify",
    "name": "houndify",
    "rawSpec": "file:houndify-2.1.0.tgz",
    "spec": "/Users/Anthony/Desktop/houndify-2.1.0/example/houndify-2.1.0.tgz",
    "type": "local"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "file:houndify-2.1.0.tgz",
  "_shasum": "edfd0504d70fe8b958dfc1c81f64ac8b01ce03fe",
  "_shrinkwrap": null,
  "_spec": "houndify@file:houndify-2.1.0.tgz",
  "_where": "/Users/Anthony/Desktop/houndify-2.1.0/example",
  "author": {
    "name": "Asif Amirguliyev",
    "email": "aamirgul@soundhound.com"
  },
  "dependencies": {
    "https-proxy-agent": "2.1.0",
    "json-bigint": "0.2.3",
    "pako": "1.0.5",
    "request": "2.74.0",
    "uuid": "3.1.0",
    "ws": "3.2.0"
  },
  "description": "The Houndify JavaScript SDK allows you to make voice and text queries to the Houndify API from your browser or Node.js script.",
  "devDependencies": {
    "babel-core": "^6.26.0",
    "babel-loader": "^6.4.1",
    "babel-preset-es2015": "^6.24.1",
    "babel-preset-stage-0": "^6.24.1",
    "exports-loader": "0.6.4",
    "fs-extra": "^4.0.2",
    "grunt": "1.0.1",
    "grunt-contrib-clean": "1.0.0",
    "grunt-contrib-copy": "1.0.0",
    "grunt-contrib-uglify": "1.0.1",
    "grunt-contrib-watch": "1.0.0",
    "grunt-shell": "1.3.1",
    "grunt-webpack": "1.0.11",
    "jest": "^21.2.1",
    "json-loader": "0.5.4",
    "selenium-webdriver": "^3.6.0",
    "wav": "^1.0.1",
    "webpack": "1.13.0",
    "webpack-dev-server": "1.14.1"
  },
  "license": "MIT",
  "main": "index.js",
  "name": "houndify",
  "optionalDependencies": {},
  "readme": "# Houndify JavaScript SDK\n\nThe Houndify JavaScript SDK allows you to make voice and text queries to the Houndify API from web browser or Node.js scripts. It comes in two forms: the in-browser javascript library [**houndify.js**](https://www.houndify.com/sdks#web) and the server-side Node.js module [**houndify**](https://www.npmjs.com/package/houndify). Both parts contain functions for sending text and voice requests to the Houndify API. Additionally the in-browser library has `AudioRecorder` for capturing audio from microphone, and Node.js module has authentication and proxy middleware creators for Express servers.\n\n\n## Set up\n\n### Client Side\n\nClient side of the JavaScript SDK doesn't have any dependencies and consists of a single JS file. You can include it via script tag and work with global `Houndify` object.\n\n```html\n<script src=\"/path/to/houndify.js\"></script>\n<script>\nvar voiceRequest = new Houndify.VoiceRequest({ /* options */ });\n</script>\n```\n\nOr you can *require* `Houndify` as a CommonJS module.\n\n```javascript\n// From houndify.js\nvar Houndify = require('path/to/houndify'); \n// From installed Node.js module\nvar Houndify = require('houndify');\n```\n\n\n### Server Side\n\nServer side of SDK is a `HoundifyExpress` object in the a [**houndify**](https://www.npmjs.com/package/houndify) module. Run `npm install houndify --save` to install it.\n\n`HoundifyExpress` object in the module has three methods used for authenticating and proxying voice and text search requests.\n\n```javascript\nvar houndifyExpress = require('houndify').HoundifyExpress;\n\napp.get('/textSearchProxy', houndifyExpress.createTextProxyHandler());\n```\n\n\n### Example Project\n\n*example* folder contains a project that shows a working setup of SDK. It contains a node *server.js* and *public* folder with frontend. \n\n`npm install` should install both [**express**](https://www.npmjs.com/package/express) and [**houndify**](https://www.npmjs.com/package/houndify).\n\nYou'll need to fill in your Houndify Client information in *config.json*. Make sure you also change \"YOUR_CLIENT_ID\" to your actual Houndify Client Id in *example/public/index.html* file.\n\n**The latest versions of web browsers require secure connection for giving access to microphone.** While you can test JavaScript SDK on *localhost* with HTTP server, you'll need to set up a HTTPS server for a different host. Set \"https\" flag in config file to **true**, and point \"sslCrtFile\" to ssl certificate and \"sslKeyFile\" to ssl key file.\n\nRun `node server.js` in the project folder and go to the url from the process output.\n\n*example* folder also contains *node-client-text.js* and *node-client-voice.js* Node.js scripts that show how to send text requests and stream audio from a file on a server side. You can find test audio files in *test_audio* folder.\n\n```bash\nnode node-client-text.js --query \"what is weather like in New York?\"\nnode node-client-voice.js --audio ./path/to/audio.wav\n```\n\n\n## Using SDK\n\n`Houndify` contains following constructors and utility methods:\n\n* VoiceRequest - constructor for initializing voice requests;\n\n* TextRequest - constructor for initializing text requests;\n\n* AudioRecorder - constructor for initializing audio recorder for browsers (Chrome, Firefox);\n\n* decodeAudioData - utility for decoding audio data uploaded with `FileReader`;\n\n* HoundifyExpress.createAuthenticationHandler - utility for creating middleware for authenticating all Houndify requests through Express server;\n\n* HoundifyExpress.createTextProxyHandler - utility for creating middleware for proxying text requests through Express server;\n\n\n### VoiceRequest\n\nPass Client Id, authentication endpoint/Client Key, request info, conversation state object, sample rate, VAD preference, and event handlers (partial transcripts, final response, error) to `VoiceRequest` constructor to start the query.\n\n```javascript\nvar voiceRequest = new Houndify.VoiceRequest({\n  // Your Houndify Client ID\n  clientId: \"YOUR_CLIENT_ID\",\n\n  // For testing environment you might want to authenticate on frontend without Node.js server. \n  // In that case you may pass in your Houndify Client Key instead of \"authURL\".\n  // clientKey: \"YOUR_CLIENT_KEY\",\n\n  // Otherwise you need to create an endpoint on your server\n  // for handling the authentication.\n  // See SDK's server-side method HoundifyExpress.createAuthenticationHandler().\n  authURL: \"/houndifyAuth\",\n\n  // Request Info JSON\n  // See https://houndify.com/reference/RequestInfo\n  requestInfo: {\n    UserID: \"test_user\",\n    Latitude: 37.388309, \n    Longitude: -121.973968\n  },\n\n  // Pass the current ConversationState stored from previous queries\n  // See https://www.houndify.com/docs#conversation-state\n  conversationState: conversationState,\n\n  // Sample rate of input audio\n  sampleRate: 16000,\n\n  // Enable Voice Activity Detection, default: true\n  enableVAD: true,\n  \n  // Partial transcript, response and error handlers\n  onTranscriptionUpdate: function(transcipt) {\n    console.log(\"Partial Transcript:\", transcipt.PartialTranscript);\n  },\n\n  onResponse: function(response, info) {\n    console.log(response);\n    if (response.AllResults && response.AllResults.length) {\n      // Pick and store appropriate ConversationState from the results. \n      // This example takes the default one from the first result.\n      conversationState = response.AllResults[0].ConversationState;\n    }\n  },\n\n  onError: function(err, info) {\n    console.log(err);\n  }\n});\n```\n\n`VoiceRequest` object has *write()*, *end()* and *abort()* methods for streaming the audio and ending the request.\n\n```javascript\n// Streams 8/16 kHz mono 16-bit little-endian PCM samples \n// in Int16Array chunks to backend\nvoiceRequest.write(audioChunk);\n\n/* ... */\n\n// Ends streaming voice search requests, expects the final response from backend\nvoiceRequest.end();\n\n/* ... */\n\n// Aborts voice search request, does not expect final response from backend\nvoiceRequest.abort();\n```\n\n**Note!** For voice search to work in production the frontend should be served through secure connection. See example project for HTTPS Express server setup. You do not need HTTPS for *localhost*.\n\nYou can use Voice Search in the browser without setting up Node.js server. You can pass in the authentication information (Houndify Client Key) directly to `HoundifyClient` object and use server of your choice without server-side **houndify** module. **Important!** Your Client Key is private and should not be exposed in the browser in production. Use `VoiceRequest` without server-side authentication only for testing, internal applications or Node.js scripts.\n\n\n### TextRequest\n\n`TextRequest` expects query string, Client Id, authentication endpoint/Client Key, request info, conversation state, proxy details and handlers.\n\n```javascript\nvar textRequest = new Houndify.TextRequest({\n  // Text query\n  query: \"What is the weather like?\",\n\n  // Your Houndify Client ID\n  clientId: \"YOUR_CLIENT_ID\",\n\n  // For testing environment you might want to authenticate on frontend without Node.js server. \n  // In that case you may pass in your Houndify Client Key instead of \"authURL\".\n  // clientKey: \"YOUR_CLIENT_KEY\",\n\n  // Otherwise you need to create an endpoint on your server\n  // for handling the authentication.\n  // See SDK's server-side method HoundifyExpress.createAuthenticationHandler().\n  authURL: \"/houndifyAuth\",\n\n  // Request Info JSON\n  // See https://houndify.com/reference/RequestInfo\n  requestInfo: { \n    UserID: \"test_user\",\n    Latitude: 37.388309, \n    Longitude: -121.973968\n  },\n\n  // Pass the current ConversationState stored from previous queries\n  // See https://www.houndify.com/docs#conversation-state\n  conversationState: conversationState,\n\n  // You need to create an endpoint on your server\n  // for handling the authentication and proxying \n  // text search http requests to Houndify backend\n  // See SDK's server-side method HoundifyExpress.createTextProxyHandler().\n  proxy: {\n    method: 'POST',\n    url: \"/textSearchProxy\",\n    // headers: {}\n    // ... More proxy options will be added as needed\n  },\n  \n  // Response and error handlers\n  onResponse: function(response, info) {\n    console.log(response);\n    if (response.AllResults && response.AllResults.length) {\n      // Pick and store appropriate ConversationState from the results. \n      // This example takes the default one from the first result.\n      conversationState = response.AllResults[0].ConversationState;\n    }\n  },\n\n  onError: function(err, info) {\n    console.log(err);\n  }\n});\n```\n\n**Note!** In order to use Text Search you'll need a proxy endpoint on your server. `HoundifyExpress` object contains *createTextProxyHandler()* method for setting that up.\n\n\n### AudioRecorder\n\nYou can use `AudioRecorder` to record audio in Chrome and Firefox and feed it into `VoiceRequest` object. It has *start()*, *stop()*, *isRecording()* methods and accepts handlers for \"start\", \"data\", \"end\" and \"error\" events.\n\n```javascript\nvar recorder = new Houndify.AudioRecorder();\n\nrecorder.on('start', function() { /* recording started */ });\nrecorder.on('data', function(data) { /* data chunk captured */ });\nrecorder.on('end', function() { /* recording stopped */ });\nrecorder.on('error', function(err) { /* recorder error */ });\n\n// Start capturing the audio\nrecorder.start();\n\n// Stop capturing the audio\nrecorder.stop();\n\n// Check if recorder is currently capturing the audio\nrecorder.isRecording();\n```\n\n## Reimplementing HoundifyExpress for other servers\n\nNode.js module **houndify** contains server-side `HoundifyExpress` object with two methods. Below are these methods annotated to help reimplementing the server-side logic if you're not using Express server.\n\n**createAuthenticationHandler({ clientId, clientKey })** accepts an object with Houndify Client Id and secret Houndify Client Key and returns an Express handler for authentication requests from client-side `HoundifyClient`. These requests will send a token as a query parameter and expect the signature back as a plain text.\n\n```javascript\nvar crypto = require('crypto');\n\n/**\n * Given Houndify Client Id and Client Key in options objects\n * returns an Express request handler for authenticating Voice Requests.\n * Signs a token/message with Houndify Client Key using the HMAC scheme.\n * The request for authentications will contain \"token\" query parameter\n * that needs to be signed with secret Client Key.\n *\n * @param {Object} opts - Options\n * @return {Function} An Express request handler\n */\nfunction createAuthenticationHandler(opts) { \n    return function (req, res) {\n        var clientKey = opts.clientKey.replace(/-/g, \"+\").replace(/_/g, \"/\");\n        var clientKeyBin = new Buffer(clientKey, \"base64\");\n        var hash = crypto.createHmac(\"sha256\", clientKeyBin).update(req.query.token).digest(\"base64\");\n        var signature = hash.replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n        res.send(signature);\n    }\n}\n```\n\n**createTextProxyHandler()** returns a simple Express handler for proxying Text Requests from client-side `HoundifyClient` to Houndify backend. Query parameters of the incoming request should be reused for the request to backend (GET https://api.houndify.com/v1/text). Pick all \"hound-*\" headers from the incoming request, and send them to the backend with the same names.\n\n```javascript\nvar request = require('request');\n\n/**\n * Returns a simple Express handler for proxying Text Requests.\n * The handler takes query parameters and houndify headers, \n * and sends them in the request to backend (GET https://api.houndify.com/v1/text). \n *\n * @return {Function} An Express request handler\n */\nfunction createTextProxyHandler() {\n    return function (req, res) {\n        var houndifyHeaders = {};\n        for (var key in req.headers) {\n            var splitKey = key.toLowerCase().split(\"-\");\n            if (splitKey[0] == \"hound\") {\n                var houndHeader = splitKey.map(function(pt) {\n                    return pt.charAt(0).toUpperCase() + pt.slice(1);\n                }).join(\"-\");\n                houndifyHeaders[houndHeader] = req.headers[key];\n            }\n        }\n \n        //GET requests contain Request Info JSON in header.\n        //POST requests contain Request Info JSON in body. \n        //Use POST proxy if Request Info JSON is expected to be bigger than header size limit of server\n        houndifyHeaders['Hound-Request-Info'] = houndifyHeaders['Hound-Request-Info'] || req.body;\n\n        request({\n            url: \"https://api.houndify.com/v1/text\",\n            qs: req.query,\n            headers: houndifyHeaders\n        }, function (err, resp, body) {\n            //if there's an request error respond with 500 and err object\n            if (err) return res.status(500).send(err.toString());\n            \n            //else send the response body from backend as it is\n            res.status(resp.statusCode).send(body);\n        });  \n    }\n}\n```\n",
  "readmeFilename": "README.md",
  "scripts": {
    "test": "jest --runInBand"
  },
  "version": "2.1.0"
}
